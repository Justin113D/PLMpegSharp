using System.Collections.Generic;

namespace PLMpegSharp.LUT
{
    internal static class VideoLUTs
    {
        public static readonly double[] PictureRate = {
            0.000, 23.976, 24.000, 25.000, 29.970, 30.000, 50.000, 59.940,
            60.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000
        };

        public static readonly byte[] ZigZag = {
             0,  1,  8, 16,  9,  2,  3, 10,
            17, 24, 32, 25, 18, 11,  4,  5,
            12, 19, 26, 33, 40, 48, 41, 34,
            27, 20, 13,  6,  7, 14, 21, 28,
            35, 42, 49, 56, 57, 50, 43, 36,
            29, 22, 15, 23, 30, 37, 44, 51,
            58, 59, 52, 45, 38, 31, 39, 46,
            53, 60, 61, 54, 47, 55, 62, 63
        };

        public static readonly byte[] IntraQuantMatrix = {
             8, 16, 19, 22, 26, 27, 29, 34,
            16, 16, 22, 24, 27, 29, 34, 37,
            19, 22, 26, 27, 29, 34, 34, 38,
            22, 22, 26, 27, 29, 34, 37, 40,
            22, 26, 27, 29, 32, 35, 40, 48,
            26, 27, 29, 32, 35, 40, 48, 58,
            26, 27, 29, 34, 38, 46, 56, 69,
            27, 29, 35, 38, 46, 56, 69, 83
        };

        public static readonly byte[] NonIntraQuantMatrix = {
            16, 16, 16, 16, 16, 16, 16, 16,
            16, 16, 16, 16, 16, 16, 16, 16,
            16, 16, 16, 16, 16, 16, 16, 16,
            16, 16, 16, 16, 16, 16, 16, 16,
            16, 16, 16, 16, 16, 16, 16, 16,
            16, 16, 16, 16, 16, 16, 16, 16,
            16, 16, 16, 16, 16, 16, 16, 16,
            16, 16, 16, 16, 16, 16, 16, 16
        };

        public static readonly byte[] PremultiplierMatrix = {
            32, 44, 42, 38, 32, 25, 17,  9,
            44, 62, 58, 52, 44, 35, 24, 12,
            42, 58, 55, 49, 42, 33, 23, 12,
            38, 52, 49, 44, 38, 30, 20, 10,
            32, 44, 42, 38, 32, 25, 17,  9,
            25, 35, 33, 30, 25, 20, 14,  7,
            17, 24, 23, 20, 17, 14,  9,  5,
             9, 12, 12, 10,  9,  7,  5,  2
        };

        public static readonly VLC[] MacroblockAddressIncrement = {
            new(  1 << 1,    0), new(       0,    1),  //   0: x
			new(  2 << 1,    0), new(  3 << 1,    0),  //   1: 0x
			new(  4 << 1,    0), new(  5 << 1,    0),  //   2: 00x
			new(       0,    3), new(       0,    2),  //   3: 01x
			new(  6 << 1,    0), new(  7 << 1,    0),  //   4: 000x
			new(       0,    5), new(       0,    4),  //   5: 001x
			new(  8 << 1,    0), new(  9 << 1,    0),  //   6: 0000x
			new(       0,    7), new(       0,    6),  //   7: 0001x
			new( 10 << 1,    0), new( 11 << 1,    0),  //   8: 0000 0x
			new( 12 << 1,    0), new( 13 << 1,    0),  //   9: 0000 1x
			new( 14 << 1,    0), new( 15 << 1,    0),  //  10: 0000 00x
			new( 16 << 1,    0), new( 17 << 1,    0),  //  11: 0000 01x
			new( 18 << 1,    0), new( 19 << 1,    0),  //  12: 0000 10x
			new(       0,    9), new(       0,    8),  //  13: 0000 11x
			new(      -1,    0), new( 20 << 1,    0),  //  14: 0000 000x
			new(      -1,    0), new( 21 << 1,    0),  //  15: 0000 001x
			new( 22 << 1,    0), new( 23 << 1,    0),  //  16: 0000 010x
			new(       0,   15), new(       0,   14),  //  17: 0000 011x
			new(       0,   13), new(       0,   12),  //  18: 0000 100x
			new(       0,   11), new(       0,   10),  //  19: 0000 101x
			new( 24 << 1,    0), new( 25 << 1,    0),  //  20: 0000 0001x
			new( 26 << 1,    0), new( 27 << 1,    0),  //  21: 0000 0011x
			new( 28 << 1,    0), new( 29 << 1,    0),  //  22: 0000 0100x
			new( 30 << 1,    0), new( 31 << 1,    0),  //  23: 0000 0101x
			new( 32 << 1,    0), new(      -1,    0),  //  24: 0000 0001 0x
			new(      -1,    0), new( 33 << 1,    0),  //  25: 0000 0001 1x
			new( 34 << 1,    0), new( 35 << 1,    0),  //  26: 0000 0011 0x
			new( 36 << 1,    0), new( 37 << 1,    0),  //  27: 0000 0011 1x
			new( 38 << 1,    0), new( 39 << 1,    0),  //  28: 0000 0100 0x
			new(       0,   21), new(       0,   20),  //  29: 0000 0100 1x
			new(       0,   19), new(       0,   18),  //  30: 0000 0101 0x
			new(       0,   17), new(       0,   16),  //  31: 0000 0101 1x
			new(       0,   35), new(      -1,    0),  //  32: 0000 0001 00x
			new(      -1,    0), new(       0,   34),  //  33: 0000 0001 11x
			new(       0,   33), new(       0,   32),  //  34: 0000 0011 00x
			new(       0,   31), new(       0,   30),  //  35: 0000 0011 01x
			new(       0,   29), new(       0,   28),  //  36: 0000 0011 10x
			new(       0,   27), new(       0,   26),  //  37: 0000 0011 11x
			new(       0,   25), new(       0,   24),  //  38: 0000 0100 00x
			new(       0,   23), new(       0,   22),  //  39: 0000 0100 01x
		};

        public static readonly VLC[] MacroblockTypeIntra = {
            new(  1 << 1,    0), new(       0,  0x01),  //   0: x
			new(      -1,    0), new(       0,  0x11),  //   1: 0x
		};

        public static readonly VLC[] MacroblockTypePredictive = {
            new(  1 << 1,    0), new(       0, 0x0a),  //   0: x
			new(  2 << 1,    0), new(       0, 0x02),  //   1: 0x
			new(  3 << 1,    0), new(       0, 0x08),  //   2: 00x
			new(  4 << 1,    0), new(  5 << 1,    0),  //   3: 000x
			new(  6 << 1,    0), new(       0, 0x12),  //   4: 0000x
			new(       0, 0x1a), new(       0, 0x01),  //   5: 0001x
			new(      -1,    0), new(       0, 0x11),  //   6: 0000 0x
		};

        public static readonly VLC[] MacroblockTypeB = {
            new(  1 << 1,    0), new(  2 << 1,    0),  //   0: x
			new(  3 << 1,    0), new(  4 << 1,    0),  //   1: 0x
			new(       0, 0x0c), new(       0, 0x0e),  //   2: 1x
			new(  5 << 1,    0), new(  6 << 1,    0),  //   3: 00x
			new(       0, 0x04), new(       0, 0x06),  //   4: 01x
			new(  7 << 1,    0), new(  8 << 1,    0),  //   5: 000x
			new(       0, 0x08), new(       0, 0x0a),  //   6: 001x
			new(  9 << 1,    0), new( 10 << 1,    0),  //   7: 0000x
			new(       0, 0x1e), new(       0, 0x01),  //   8: 0001x
			new(      -1,    0), new(       0, 0x11),  //   9: 0000 0x
			new(       0, 0x16), new(       0, 0x1a),  //  10: 0000 1x
		};

        public static readonly Dictionary<VideoPictureType, VLC[]?> MacroblockType = new(){
            {VideoPictureType.None, null},
            {VideoPictureType.Intra, MacroblockTypeIntra},
            {VideoPictureType.Predictive, MacroblockTypePredictive},
            {VideoPictureType.B, MacroblockTypeB },
        };


        public static readonly VLC[] CodeBlockPattern = {
            new(  1 << 1,    0), new(  2 << 1,    0),  //   0: x
			new(  3 << 1,    0), new(  4 << 1,    0),  //   1: 0x
			new(  5 << 1,    0), new(  6 << 1,    0),  //   2: 1x
			new(  7 << 1,    0), new(  8 << 1,    0),  //   3: 00x
			new(  9 << 1,    0), new( 10 << 1,    0),  //   4: 01x
			new( 11 << 1,    0), new( 12 << 1,    0),  //   5: 10x
			new( 13 << 1,    0), new(       0,   60),  //   6: 11x
			new( 14 << 1,    0), new( 15 << 1,    0),  //   7: 000x
			new( 16 << 1,    0), new( 17 << 1,    0),  //   8: 001x
			new( 18 << 1,    0), new( 19 << 1,    0),  //   9: 010x
			new( 20 << 1,    0), new( 21 << 1,    0),  //  10: 011x
			new( 22 << 1,    0), new( 23 << 1,    0),  //  11: 100x
			new(       0,   32), new(       0,   16),  //  12: 101x
			new(       0,    8), new(       0,    4),  //  13: 110x
			new( 24 << 1,    0), new( 25 << 1,    0),  //  14: 0000x
			new( 26 << 1,    0), new( 27 << 1,    0),  //  15: 0001x
			new( 28 << 1,    0), new( 29 << 1,    0),  //  16: 0010x
			new( 30 << 1,    0), new( 31 << 1,    0),  //  17: 0011x
			new(       0,   62), new(       0,    2),  //  18: 0100x
			new(       0,   61), new(       0,    1),  //  19: 0101x
			new(       0,   56), new(       0,   52),  //  20: 0110x
			new(       0,   44), new(       0,   28),  //  21: 0111x
			new(       0,   40), new(       0,   20),  //  22: 1000x
			new(       0,   48), new(       0,   12),  //  23: 1001x
			new( 32 << 1,    0), new( 33 << 1,    0),  //  24: 0000 0x
			new( 34 << 1,    0), new( 35 << 1,    0),  //  25: 0000 1x
			new( 36 << 1,    0), new( 37 << 1,    0),  //  26: 0001 0x
			new( 38 << 1,    0), new( 39 << 1,    0),  //  27: 0001 1x
			new( 40 << 1,    0), new( 41 << 1,    0),  //  28: 0010 0x
			new( 42 << 1,    0), new( 43 << 1,    0),  //  29: 0010 1x
			new(       0,   63), new(       0,    3),  //  30: 0011 0x
			new(       0,   36), new(       0,   24),  //  31: 0011 1x
			new( 44 << 1,    0), new( 45 << 1,    0),  //  32: 0000 00x
			new( 46 << 1,    0), new( 47 << 1,    0),  //  33: 0000 01x
			new( 48 << 1,    0), new( 49 << 1,    0),  //  34: 0000 10x
			new( 50 << 1,    0), new( 51 << 1,    0),  //  35: 0000 11x
			new( 52 << 1,    0), new( 53 << 1,    0),  //  36: 0001 00x
			new( 54 << 1,    0), new( 55 << 1,    0),  //  37: 0001 01x
			new( 56 << 1,    0), new( 57 << 1,    0),  //  38: 0001 10x
			new( 58 << 1,    0), new( 59 << 1,    0),  //  39: 0001 11x
			new(       0,   34), new(       0,   18),  //  40: 0010 00x
			new(       0,   10), new(       0,    6),  //  41: 0010 01x
			new(       0,   33), new(       0,   17),  //  42: 0010 10x
			new(       0,    9), new(       0,    5),  //  43: 0010 11x
			new(      -1,    0), new( 60 << 1,    0),  //  44: 0000 000x
			new( 61 << 1,    0), new( 62 << 1,    0),  //  45: 0000 001x
			new(       0,   58), new(       0,   54),  //  46: 0000 010x
			new(       0,   46), new(       0,   30),  //  47: 0000 011x
			new(       0,   57), new(       0,   53),  //  48: 0000 100x
			new(       0,   45), new(       0,   29),  //  49: 0000 101x
			new(       0,   38), new(       0,   26),  //  50: 0000 110x
			new(       0,   37), new(       0,   25),  //  51: 0000 111x
			new(       0,   43), new(       0,   23),  //  52: 0001 000x
			new(       0,   51), new(       0,   15),  //  53: 0001 001x
			new(       0,   42), new(       0,   22),  //  54: 0001 010x
			new(       0,   50), new(       0,   14),  //  55: 0001 011x
			new(       0,   41), new(       0,   21),  //  56: 0001 100x
			new(       0,   49), new(       0,   13),  //  57: 0001 101x
			new(       0,   35), new(       0,   19),  //  58: 0001 110x
			new(       0,   11), new(       0,    7),  //  59: 0001 111x
			new(       0,   39), new(       0,   27),  //  60: 0000 0001x
			new(       0,   59), new(       0,   55),  //  61: 0000 0010x
			new(       0,   47), new(       0,   31),  //  62: 0000 0011x
		};

        public static readonly VLC[] Motion = {
            new(  1 << 1,    0), new(       0,    0),  //   0: x
			new(  2 << 1,    0), new(  3 << 1,    0),  //   1: 0x
			new(  4 << 1,    0), new(  5 << 1,    0),  //   2: 00x
			new(       0,    1), new(       0,   -1),  //   3: 01x
			new(  6 << 1,    0), new(  7 << 1,    0),  //   4: 000x
			new(       0,    2), new(       0,   -2),  //   5: 001x
			new(  8 << 1,    0), new(  9 << 1,    0),  //   6: 0000x
			new(       0,    3), new(       0,   -3),  //   7: 0001x
			new( 10 << 1,    0), new( 11 << 1,    0),  //   8: 0000 0x
			new( 12 << 1,    0), new( 13 << 1,    0),  //   9: 0000 1x
			new(      -1,    0), new( 14 << 1,    0),  //  10: 0000 00x
			new( 15 << 1,    0), new( 16 << 1,    0),  //  11: 0000 01x
			new( 17 << 1,    0), new( 18 << 1,    0),  //  12: 0000 10x
			new(       0,    4), new(       0,   -4),  //  13: 0000 11x
			new(      -1,    0), new( 19 << 1,    0),  //  14: 0000 001x
			new( 20 << 1,    0), new( 21 << 1,    0),  //  15: 0000 010x
			new(       0,    7), new(       0,   -7),  //  16: 0000 011x
			new(       0,    6), new(       0,   -6),  //  17: 0000 100x
			new(       0,    5), new(       0,   -5),  //  18: 0000 101x
			new( 22 << 1,    0), new( 23 << 1,    0),  //  19: 0000 0011x
			new( 24 << 1,    0), new( 25 << 1,    0),  //  20: 0000 0100x
			new( 26 << 1,    0), new( 27 << 1,    0),  //  21: 0000 0101x
			new( 28 << 1,    0), new( 29 << 1,    0),  //  22: 0000 0011 0x
			new( 30 << 1,    0), new( 31 << 1,    0),  //  23: 0000 0011 1x
			new( 32 << 1,    0), new( 33 << 1,    0),  //  24: 0000 0100 0x
			new(       0,   10), new(       0,  -10),  //  25: 0000 0100 1x
			new(       0,    9), new(       0,   -9),  //  26: 0000 0101 0x
			new(       0,    8), new(       0,   -8),  //  27: 0000 0101 1x
			new(       0,   16), new(       0,  -16),  //  28: 0000 0011 00x
			new(       0,   15), new(       0,  -15),  //  29: 0000 0011 01x
			new(       0,   14), new(       0,  -14),  //  30: 0000 0011 10x
			new(       0,   13), new(       0,  -13),  //  31: 0000 0011 11x
			new(       0,   12), new(       0,  -12),  //  32: 0000 0100 00x
			new(       0,   11), new(       0,  -11),  //  33: 0000 0100 01x
		};


        public static readonly VLC[] DCTSizeLuminance = {
            new(  1 << 1,    0), new(  2 << 1,    0),  //   0: x
			new(       0,    1), new(       0,    2),  //   1: 0x
			new(  3 << 1,    0), new(  4 << 1,    0),  //   2: 1x
			new(       0,    0), new(       0,    3),  //   3: 10x
			new(       0,    4), new(  5 << 1,    0),  //   4: 11x
			new(       0,    5), new(  6 << 1,    0),  //   5: 111x
			new(       0,    6), new(  7 << 1,    0),  //   6: 1111x
			new(       0,    7), new(  8 << 1,    0),  //   7: 1111 1x
			new(       0,    8), new(      -1,    0),  //   8: 1111 11x
		};

        public static readonly VLC[] DCTSizeChrominance = {
            new(  1 << 1,    0), new(  2 << 1,    0),  //   0: x
			new(       0,    0), new(       0,    1),  //   1: 0x
			new(       0,    2), new(  3 << 1,    0),  //   2: 1x
			new(       0,    3), new(  4 << 1,    0),  //   3: 11x
			new(       0,    4), new(  5 << 1,    0),  //   4: 111x
			new(       0,    5), new(  6 << 1,    0),  //   5: 1111x
			new(       0,    6), new(  7 << 1,    0),  //   6: 1111 1x
			new(       0,    7), new(  8 << 1,    0),  //   7: 1111 11x
			new(       0,    8), new(      -1,    0),  //   8: 1111 111x
		};

        public static readonly VLC[][] DCTSize = {
            DCTSizeLuminance,
            DCTSizeChrominance,
            DCTSizeChrominance
        };

        //  DCTCoefficient bitmap:
        //    0xff00  run
        //    0x00ff  level

        //  Decoded values are unsigned. Sign bit follows in the stream.

        public static readonly UVLC[] DCTCoefficient = {
            new(  1 << 1,        0), new(       0,   0x0001),  //   0: x
			new(  2 << 1,        0), new(  3 << 1,        0),  //   1: 0x
			new(  4 << 1,        0), new(  5 << 1,        0),  //   2: 00x
			new(  6 << 1,        0), new(       0,   0x0101),  //   3: 01x
			new(  7 << 1,        0), new(  8 << 1,        0),  //   4: 000x
			new(  9 << 1,        0), new( 10 << 1,        0),  //   5: 001x
			new(       0,   0x0002), new(       0,   0x0201),  //   6: 010x
			new( 11 << 1,        0), new( 12 << 1,        0),  //   7: 0000x
			new( 13 << 1,        0), new( 14 << 1,        0),  //   8: 0001x
			new( 15 << 1,        0), new(       0,   0x0003),  //   9: 0010x
			new(       0,   0x0401), new(       0,   0x0301),  //  10: 0011x
			new( 16 << 1,        0), new(       0,   0xffff),  //  11: 0000 0x
			new( 17 << 1,        0), new( 18 << 1,        0),  //  12: 0000 1x
			new(       0,   0x0701), new(       0,   0x0601),  //  13: 0001 0x
			new(       0,   0x0102), new(       0,   0x0501),  //  14: 0001 1x
			new( 19 << 1,        0), new( 20 << 1,        0),  //  15: 0010 0x
			new( 21 << 1,        0), new( 22 << 1,        0),  //  16: 0000 00x
			new(       0,   0x0202), new(       0,   0x0901),  //  17: 0000 10x
			new(       0,   0x0004), new(       0,   0x0801),  //  18: 0000 11x
			new( 23 << 1,        0), new( 24 << 1,        0),  //  19: 0010 00x
			new( 25 << 1,        0), new( 26 << 1,        0),  //  20: 0010 01x
			new( 27 << 1,        0), new( 28 << 1,        0),  //  21: 0000 000x
			new( 29 << 1,        0), new( 30 << 1,        0),  //  22: 0000 001x
			new(       0,   0x0d01), new(       0,   0x0006),  //  23: 0010 000x
			new(       0,   0x0c01), new(       0,   0x0b01),  //  24: 0010 001x
			new(       0,   0x0302), new(       0,   0x0103),  //  25: 0010 010x
			new(       0,   0x0005), new(       0,   0x0a01),  //  26: 0010 011x
			new( 31 << 1,        0), new( 32 << 1,        0),  //  27: 0000 0000x
			new( 33 << 1,        0), new( 34 << 1,        0),  //  28: 0000 0001x
			new( 35 << 1,        0), new( 36 << 1,        0),  //  29: 0000 0010x
			new( 37 << 1,        0), new( 38 << 1,        0),  //  30: 0000 0011x
			new( 39 << 1,        0), new( 40 << 1,        0),  //  31: 0000 0000 0x
			new( 41 << 1,        0), new( 42 << 1,        0),  //  32: 0000 0000 1x
			new( 43 << 1,        0), new( 44 << 1,        0),  //  33: 0000 0001 0x
			new( 45 << 1,        0), new( 46 << 1,        0),  //  34: 0000 0001 1x
			new(       0,   0x1001), new(       0,   0x0502),  //  35: 0000 0010 0x
			new(       0,   0x0007), new(       0,   0x0203),  //  36: 0000 0010 1x
			new(       0,   0x0104), new(       0,   0x0f01),  //  37: 0000 0011 0x
			new(       0,   0x0e01), new(       0,   0x0402),  //  38: 0000 0011 1x
			new( 47 << 1,        0), new( 48 << 1,        0),  //  39: 0000 0000 00x
			new( 49 << 1,        0), new( 50 << 1,        0),  //  40: 0000 0000 01x
			new( 51 << 1,        0), new( 52 << 1,        0),  //  41: 0000 0000 10x
			new( 53 << 1,        0), new( 54 << 1,        0),  //  42: 0000 0000 11x
			new( 55 << 1,        0), new( 56 << 1,        0),  //  43: 0000 0001 00x
			new( 57 << 1,        0), new( 58 << 1,        0),  //  44: 0000 0001 01x
			new( 59 << 1,        0), new( 60 << 1,        0),  //  45: 0000 0001 10x
			new( 61 << 1,        0), new( 62 << 1,        0),  //  46: 0000 0001 11x
			new(      -1,        0), new( 63 << 1,        0),  //  47: 0000 0000 000x
			new( 64 << 1,        0), new( 65 << 1,        0),  //  48: 0000 0000 001x
			new( 66 << 1,        0), new( 67 << 1,        0),  //  49: 0000 0000 010x
			new( 68 << 1,        0), new( 69 << 1,        0),  //  50: 0000 0000 011x
			new( 70 << 1,        0), new( 71 << 1,        0),  //  51: 0000 0000 100x
			new( 72 << 1,        0), new( 73 << 1,        0),  //  52: 0000 0000 101x
			new( 74 << 1,        0), new( 75 << 1,        0),  //  53: 0000 0000 110x
			new( 76 << 1,        0), new( 77 << 1,        0),  //  54: 0000 0000 111x
			new(       0,   0x000b), new(       0,   0x0802),  //  55: 0000 0001 000x
			new(       0,   0x0403), new(       0,   0x000a),  //  56: 0000 0001 001x
			new(       0,   0x0204), new(       0,   0x0702),  //  57: 0000 0001 010x
			new(       0,   0x1501), new(       0,   0x1401),  //  58: 0000 0001 011x
			new(       0,   0x0009), new(       0,   0x1301),  //  59: 0000 0001 100x
			new(       0,   0x1201), new(       0,   0x0105),  //  60: 0000 0001 101x
			new(       0,   0x0303), new(       0,   0x0008),  //  61: 0000 0001 110x
			new(       0,   0x0602), new(       0,   0x1101),  //  62: 0000 0001 111x
			new( 78 << 1,        0), new( 79 << 1,        0),  //  63: 0000 0000 0001x
			new( 80 << 1,        0), new( 81 << 1,        0),  //  64: 0000 0000 0010x
			new( 82 << 1,        0), new( 83 << 1,        0),  //  65: 0000 0000 0011x
			new( 84 << 1,        0), new( 85 << 1,        0),  //  66: 0000 0000 0100x
			new( 86 << 1,        0), new( 87 << 1,        0),  //  67: 0000 0000 0101x
			new( 88 << 1,        0), new( 89 << 1,        0),  //  68: 0000 0000 0110x
			new( 90 << 1,        0), new( 91 << 1,        0),  //  69: 0000 0000 0111x
			new(       0,   0x0a02), new(       0,   0x0902),  //  70: 0000 0000 1000x
			new(       0,   0x0503), new(       0,   0x0304),  //  71: 0000 0000 1001x
			new(       0,   0x0205), new(       0,   0x0107),  //  72: 0000 0000 1010x
			new(       0,   0x0106), new(       0,   0x000f),  //  73: 0000 0000 1011x
			new(       0,   0x000e), new(       0,   0x000d),  //  74: 0000 0000 1100x
			new(       0,   0x000c), new(       0,   0x1a01),  //  75: 0000 0000 1101x
			new(       0,   0x1901), new(       0,   0x1801),  //  76: 0000 0000 1110x
			new(       0,   0x1701), new(       0,   0x1601),  //  77: 0000 0000 1111x
			new( 92 << 1,        0), new( 93 << 1,        0),  //  78: 0000 0000 0001 0x
			new( 94 << 1,        0), new( 95 << 1,        0),  //  79: 0000 0000 0001 1x
			new( 96 << 1,        0), new( 97 << 1,        0),  //  80: 0000 0000 0010 0x
			new( 98 << 1,        0), new( 99 << 1,        0),  //  81: 0000 0000 0010 1x
			new(100 << 1,        0), new(101 << 1,        0),  //  82: 0000 0000 0011 0x
			new(102 << 1,        0), new(103 << 1,        0),  //  83: 0000 0000 0011 1x
			new(       0,   0x001f), new(       0,   0x001e),  //  84: 0000 0000 0100 0x
			new(       0,   0x001d), new(       0,   0x001c),  //  85: 0000 0000 0100 1x
			new(       0,   0x001b), new(       0,   0x001a),  //  86: 0000 0000 0101 0x
			new(       0,   0x0019), new(       0,   0x0018),  //  87: 0000 0000 0101 1x
			new(       0,   0x0017), new(       0,   0x0016),  //  88: 0000 0000 0110 0x
			new(       0,   0x0015), new(       0,   0x0014),  //  89: 0000 0000 0110 1x
			new(       0,   0x0013), new(       0,   0x0012),  //  90: 0000 0000 0111 0x
			new(       0,   0x0011), new(       0,   0x0010),  //  91: 0000 0000 0111 1x
			new(104 << 1,        0), new(105 << 1,        0),  //  92: 0000 0000 0001 00x
			new(106 << 1,        0), new(107 << 1,        0),  //  93: 0000 0000 0001 01x
			new(108 << 1,        0), new(109 << 1,        0),  //  94: 0000 0000 0001 10x
			new(110 << 1,        0), new(111 << 1,        0),  //  95: 0000 0000 0001 11x
			new(       0,   0x0028), new(       0,   0x0027),  //  96: 0000 0000 0010 00x
			new(       0,   0x0026), new(       0,   0x0025),  //  97: 0000 0000 0010 01x
			new(       0,   0x0024), new(       0,   0x0023),  //  98: 0000 0000 0010 10x
			new(       0,   0x0022), new(       0,   0x0021),  //  99: 0000 0000 0010 11x
			new(       0,   0x0020), new(       0,   0x010e),  // 100: 0000 0000 0011 00x
			new(       0,   0x010d), new(       0,   0x010c),  // 101: 0000 0000 0011 01x
			new(       0,   0x010b), new(       0,   0x010a),  // 102: 0000 0000 0011 10x
			new(       0,   0x0109), new(       0,   0x0108),  // 103: 0000 0000 0011 11x
			new(       0,   0x0112), new(       0,   0x0111),  // 104: 0000 0000 0001 000x
			new(       0,   0x0110), new(       0,   0x010f),  // 105: 0000 0000 0001 001x
			new(       0,   0x0603), new(       0,   0x1002),  // 106: 0000 0000 0001 010x
			new(       0,   0x0f02), new(       0,   0x0e02),  // 107: 0000 0000 0001 011x
			new(       0,   0x0d02), new(       0,   0x0c02),  // 108: 0000 0000 0001 100x
			new(       0,   0x0b02), new(       0,   0x1f01),  // 109: 0000 0000 0001 101x
			new(       0,   0x1e01), new(       0,   0x1d01),  // 110: 0000 0000 0001 110x
			new(       0,   0x1c01), new(       0,   0x1b01),  // 111: 0000 0000 0001 111x
		};

    }
}
